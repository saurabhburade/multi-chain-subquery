# To improve query performance, we strongly suggest adding indexes to any field that you plan to filter or sort by
# Add the `@index` or `@index(unique: true)` annotation after any non-key field
# https://academy.subquery.network/build/graphql.html#indexing-by-non-primary-key-field

type PriceFeed @entity {
  id: ID!

  blockNumber: Int!

  date: Date

  ethPrice: Float!
  availPrice: Float!
}
type SpecVersion @entity {
  id: ID! #specVersion
  blockHeight: BigInt!
}

type Block @entity {
  id: ID!
  number: Int! @index
  hash: String! @index(unique: true)
  timestamp: Date! @index(unique: true)
  parentHash: String!
  stateRoot: String!
  extrinsicsRoot: String!
  runtimeVersion: Int!
  nbExtrinsics: Int!
  nbEvents: Int!
  author: String @index
  sessionId: Int @index
}

type Session @entity {
  id: ID!
  validators: [String]!
}

type Extrinsic @entity {
  id: ID!
  block: Block!
  txHash: String! @index(unique: true)
  module: String! @index
  call: String! @index
  blockHeight: BigInt! @index
  success: Boolean!
  isSigned: Boolean!
  extrinsicIndex: Int!
  hash: String! @index(unique: true)
  timestamp: Date! @index
  signer: String! @index
  signature: String!
  fees: String
  feesRounded: Float @index
  nonce: Int!
  argsName: [String]!
  argsValue: [String]!
  nbEvents: Int!
}

type Event @entity {
  id: ID!
  block: Block!
  extrinsicId: String
  module: String! @index
  event: String! @index
  blockHeight: BigInt! @index
  eventIndex: Int!
  call: String! @index
  argsName: [String]!
  argsValue: [String]!
  timestamp: Date! @index
}

type Log @entity {
  id: ID!
  block: Block!
  type: String!
  engine: String
  data: String!
}

type HeaderExtension @entity {
  id: ID!
  block: Block!
  version: String
}

type Commitment @entity {
  id: ID!
  block: Block!
  headerExtension: HeaderExtension!
  rows: Int
  cols: Int
  dataRoot: String @index
  commitment: String
}

type AppLookup @entity {
  id: ID!
  block: Block!
  headerExtension: HeaderExtension!
  size: Int
  index: String
}

type TransferEntity @entity {
  id: ID!
  blockId: String! @index
  blockHash: String!
  extrinsicId: String!
  timestamp: Date! @index
  from: String! @index
  to: String! @index
  currency: String!
  amount: String!
  amountRounded: Float! @index
}

type AccountEntity @entity {
  id: ID! @index
  validator: Boolean
  validatorSessionParticipated: Int
  amount: String
  amountFrozen: String
  amountTotal: String
  amountRounded: Float @index
  amountFrozenRounded: Float @index
  amountTotalRounded: Float @index
  createdAt: Date!
  updatedAt: Date!
  timestampCreation: Date! @index
}

type DataSubmission @entity {
  id: ID!
  extrinsicId: String!
  timestamp: Date! @index
  byteSize: Int! @index
  appId: Int! @index
  signer: String! @index
  fees: Float
  feesPerMb: Float @index
}

type AccounToUpdateValue @entity {
  id: ID!
  accounts: [String]!
}
